 




data_file <- "transactions.csv"

if (!file.exists(data_file)) {
  write.csv(data.frame(
    Date = as.Date(character()),
    Customer_Name = character(),
    Mobile_Number = character(),
    Type = character(),
    Total_Amount = numeric(),
    Profit = numeric(),
    stringsAsFactors = FALSE
  ), data_file, row.names = FALSE)
}

history_stack <- reactiveValues(data = list())
redo_stack <- reactiveValues(data = list())


ui <- fluidPage(
  useShinyjs(),
  titlePanel("📋 Load & GCash in/out Profit Tracker", windowTitle = "Transaction History"),
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        condition = "input.tabs == 'Transactions'",
        textInput("customer_name", "Customer Name:"),
        textInput("mobile", "Mobile Number:"),
        selectInput("type", "Transaction Type:",
                    choices = c("Load", "GCash-In", "GCash-Out")),
        numericInput("totalamount", "Total Amount(₱):", value = 0),
        actionButton("submit", "Save Transaction", class = "btn btn-primary"),
        br(), br(),
        actionButton("deleterow", "Delete Row", class = "btn btn-warning"),
        actionButton("undoBtn", "Undo", class = "btn btn-dark"),
        actionButton("redoBtn", "Redo", class = "btn btn-dark"),
        br(), br(),
        downloadButton("downloadData", "Download Transactions"),
        br(), br()
      )
    ),
    mainPanel(
      tabsetPanel(id = "tabs",
                  selected = "Transactions",
                  tabPanel("📋 Transactions", value = "Transactions", br(), 
                           DTOutput("data_table"), br(), 
                           actionButton("clearhistory", "Clear History", class = "btn btn-danger")),
                  
      )
    )
  )
)

server <- function(input, output, session) {
  data <- reactiveVal()
  
  read_data <- function() {
    df <- read.csv(data_file, stringsAsFactors = FALSE)
    df$Date <- as.Date(df$Date)
    return(df)
  }
  
  data(read_data())
  
  save_data <- function(df) {
    history_stack$data <- append(history_stack$data, list(data()))
    redo_stack$data <- list()
    write.csv(df, data_file, row.names = FALSE)
    data(df)
  }
  
  
  observeEvent(input$submit, {
    req(input$customer_name, input$mobile, input$totalamount)
    
    mobile_digits <- gsub("[^0-9]", "", input$mobile)
    if (nchar(mobile_digits) != 11) {
      showNotification("❌ Invalid mobile number!", type = "error")
      return()
    }
    
    profit <- if(input$type == "Load") {
      if(input$totalamount >=1 & input$totalamount <50) {
        3
    } else if (input$totalamount >=50 & input$totalamount <100) {
      5
    } else if (input$totalamount >=100 & input$totalamount <200) {
      10
    } else if (input$totalamount >=200 & input$totalamount <300) {
      15
    } else if (input$totalamount >=300 & input$totalamount <400) {
      20
    } else if (input$totalamount >=400 & input$totalamount <500) {
      25
    } else if (input$totalamount >=500 & input$totalamount <=1000) {
      50
    } else {
      60
    }
  } else if(input$type %in% c("GCash-In", "GCash-Out")) {
    if (input$totalamount <1) {
      0
    } else if (input$totalamount <=250) {
      5
    } else if (input$totalamount >250 & input$totalamount <=500) {
      10
    } else if (input$totalamount >500 & input$totalamount <=750) {
      15
    } else if (input$totalamount >750 & input$totalamount <=1000) {
      20
    } else if (input$totalamount >1000 & input$totalamount <=1250) {
      25
    } else if (input$totalamount >1250 & input$totalamount <=1500) {
      30
    } else if (input$totalamount >1500 & input$totalamount <=1750) {
      35
    } else if (input$totalamount >1750 & input$totalamount <=2000) {
      40
    } else if (input$totalamount >2000 & input$totalamount <=2250) {
      45
    } else if (input$totalamount >2250 & input$totalamount <=2500) {
      50
    } else if (input$totalamount >2500 & input$totalamount <=2750) {
      55
    } else if (input$totalamount >2750 & input$totalamount <=3000) {
      60
    } else if (input$totalamount >3000 & input$totalamount <=3250) {
      65
    } else if (input$totalamount >3250 & input$totalamount <=3500) {
      70
    } else if (input$totalamount >3500 & input$totalamount <=3750) {
      75
    } else if (input$totalamount >3750 & input$totalamount <=4000) {
      80
    } else if (input$totalamount >4000 & input$totalamount <=4250) {
      85
    } else if (input$totalamount >4250 & input$totalamount <=4500) {
      90
    } else if (input$totalamount >4500 & input$totalamount <=4750) {
      95
    } else if (input$totalamount >4750 & input$totalamount <=5000) {
      100
    } else {
      105
    }
  } else {
    0
  }
      
    
    
    new_entry <- data.frame(
      Date = Sys.Date(),
      Customer_Name = input$customer_name,
      Mobile_Number = input$mobile,
      Type = input$type,
      Total_Amount = input$totalamount,  
      Profit = profit,
      stringsAsFactors = FALSE
    )
    
    df <- data()
    updated_df <- rbind(df, new_entry)
    save_data(updated_df)
    
    updateTextInput(session, "customer_name", value = "")
    updateTextInput(session, "mobile", value = "")
    updateNumericInput(session, "totalamount", value = 0)
    
    showNotification("✅ Transaction Saved!", type = "message")
  })
  
  observeEvent(input$deleterow, {
    req(input$data_table_rows_selected)
    selected_row <- input$data_table_rows_selected
    df <- data()
    df <- df[-selected_row, ]
    save_data(df)
  })
  
  
  observeEvent(input$clearhistory, {
    empty_df <- data.frame(
      Date = as.Date(character()),
      Customer_Name = character(),
      Mobile_Number = character(),
      Type = character(),
      Total_Amount = numeric(),
      Profit = numeric(),
      stringsAsFactors = FALSE
    )
    write.csv(empty_df, data_file, row.names = FALSE)
    data(empty_df)  
    showNotification("🧹 History cleared successfully!", type = "message")
  })
  
  output$data_table <- renderDT({
    datatable(data(), escape = FALSE, selection = "single")
  })
  
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("transactions-", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(data(), file, row.names = FALSE)
    }
  )
  
  observeEvent(input$undoBtn, {
    if (length(history_stack$data) > 0) {
      last_state <- tail(history_stack$data, 1)[[1]]
      history_stack$data <- head(history_stack$data, -1)
      
      
      redo_stack$data <- append(redo_stack$data, list(data()))
      
      write.csv(last_state, data_file, row.names = FALSE)
      data(last_state)
      showNotification("↩️ Undo successful!", type = "message")
    } else {
      showNotification("⚠️ Nothing to undo!", type = "warning")
    }
  })
  
  observeEvent(input$redoBtn, {
    if (length(redo_stack$data) > 0) {
      next_state <- tail(redo_stack$data, 1)[[1]]
      redo_stack$data <- head(redo_stack$data, -1)
      
      
      history_stack$data <- append(history_stack$data, list(data()))
      
      write.csv(next_state, data_file, row.names = FALSE)
      data(next_state)
      showNotification("🔁 Redo successful!", type = "message")
    } else {
      showNotification("⚠️ Nothing to redo!", type = "warning")
    }
  })
  
  
}

shinyApp(ui = ui, server = server)


