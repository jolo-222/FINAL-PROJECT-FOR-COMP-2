# Load necessary libraries
library(shiny)
library(readxl)
library(writexl)
library(DT)
library(ggplot2)
library(shinyjs)
library(dplyr)
library(plotly)
library(bslib)
library(htmltools)
library(shinyWidgets)
library(shinythemes)
library(scales)
library(lubridate)

# Initialize transaction data file
data_file <- "transactions.csv"

if (!file.exists(data_file)) {
  write.csv(data.frame(
    Date = as.Date(character()),
    Customer_Name = character(),
    Mobile_Number = character(),
    Type = character(),
    Total_Amount = numeric(),
    Profit = numeric(),
    stringsAsFactors = FALSE
  ), data_file, row.names = FALSE)
}

# INSTRUCTIONS:
# Ensure the Excel file 'STORE_JAVIER.xlsx' is in the working directory
excel_file <- "C:/Users/Jhon lowell Daculan/Downloads/STORE_JAVIER_FINAL_1.xlsx"

# If the excel file exists, load it. Otherwise use a default dataset
if(file.exists(excel_file)) {
  sheet_names <- excel_sheets(excel_file)
  product_data <- lapply(sheet_names, function(sheet) read_excel(excel_file, sheet = sheet))
  names(product_data) <- sheet_names
} else {
  # Create dummy data for demo purposes
  sheet_names <- c("Beverages", "Snacks", "Canned Goods", "Others")
  product_data <- lapply(sheet_names, function(sheet) {
    data.frame(
      `Product Name` = paste(sheet, "Item", 1:5),
      `Unit Cost (PHP)` = round(runif(5, 10, 50), 2),
      `Unit Price (PHP)` = round(runif(5, 20, 80), 2)
    )
  })
  names(product_data) <- sheet_names
}

# Function to clean sheet names to category labels
clean_category <- function(sheet_name) {
  gsub("[.]", "", toupper(trimws(sheet_name)))
}

# Remove the LETTERS formatting completely
categories <- setNames(sheet_names, sheet_names)

# Initialize local storage for persistence (Para Auto-Save kapag nawala)
saveDataPath <- "sales_data.rds"

# Try to load existing sales data
if (file.exists(saveDataPath)) {
  sales_data <- readRDS(saveDataPath)
} else {
  # Initialize reactive sales data if no saved data exists
  sales_data <- data.frame(
    Date = as.Date(character()),
    Category = character(),
    Product = character(),
    Quantity = numeric(),
    Unit_Cost = numeric(),
    Unit_Price = numeric(),
    Profit = numeric(),
    stringsAsFactors = FALSE
  )
}

# Initialize history stacks for transactions
history_stack <- reactiveValues(data = list())
redo_stack <- reactiveValues(data = list())

# Custom CSS for updated styling requirements
custom_css <- HTML("
  :root {
    --brown-dark: #7B3F00;     /* Dark brown */
    --brown-medium: #A0522D;   /* Medium brown */
    --brown-light: #CD853F;    /* Light brown */
    --brown-lighter: #DEB887;  /* Very light brown */
    --off-white: #FFF5EB;      /* Light orange as background */
    --dark-orange: #FF8C00;    /* Dark orange for borders */
  }
  
  body {
  background-color: #FFF5EB; /* Base color as fallback */
  animation: backgroundChange 6s steps(3) infinite;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

@keyframes backgroundChange {
  0% {
    background-color: #FFF5EB; /* Very light orange */
  }
  33.33% {
    background-color: #F0E0C6; /* Very light brown */
  }
  66.66% {
    background-color: #F5E8D7; /* Light beige (blend) */
  }
  100% {
    background-color: #FFF5EB; /* Back to very light orange */
  }
}
  
  .main-title {
    color: var(--brown-dark);
    font-weight: bold;
    text-align: center;
    margin-bottom: 30px;
    font-size: 2.5rem;
    letter-spacing: 1px;
  }
  
  .card {
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
    background-color: white;
    overflow: hidden;
  }
  
  .card-header {
    background-color: var(--brown-dark);
    color: white;
    font-weight: bold;
    padding: 12px 20px;
    border: none;
    text-transform: uppercase;
  }
  
  .card-body {
    padding: 20px;
  }
  
  .sidebar-card {
    background-color: white;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
  }
  
  .btn-primary {
    background-color: white !important;
    border-color: var(--brown-dark) !important;
    color: var(--brown-dark) !important;
    border-radius: 5px;
    padding: 8px 16px;
    transition: all 0.3s ease;
    font-weight: bold !important;
  }
  
  .btn-primary:hover {
    background-color: var(--brown-lighter) !important;
    border-color: var(--brown-dark) !important;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .btn-danger {
    background-color: #dc3545 !important;
    border-color: #dc3545 !important;
    color: white !important;
  }
  
  .btn-danger:hover {
    background-color: #c82333 !important;
    border-color: #bd2130 !important;
  }
  
  .btn-warning {
    background-color: #ffc107 !important;
    border-color: #ffc107 !important;
    color: #212529 !important;
  }
  
  .btn-warning:hover {
    background-color: #e0a800 !important;
    border-color: #d39e00 !important;
  }
  
  .btn-dark {
    background-color: #343a40 !important;
    border-color: #343a40 !important;
    color: white !important;
  }
  
  .btn-dark:hover {
    background-color: #23272b !important;
    border-color: #1d2124 !important;
  }
  
  .selectize-input {
    background-color: white !important;
    border: 2px solid var(--dark-orange) !important;
    border-radius: 5px !important;
    box-shadow: none !important;
    transition: all 0.3s ease;
  }
  
  .selectize-input.focus {
    border-color: var(--brown-dark) !important;
    box-shadow: 0 0 0 0.2rem rgba(123, 63, 0, 0.25) !important;
    transform: scale(1.02);
  }
  
  .selectize-dropdown {
    background-color: white !important;
    border: 2px solid var(--dark-orange) !important;
    border-radius: 0 0 5px 5px !important;
  }
  
  .selectize-dropdown-content .option {
    background-color: white !important;
    color: var(--brown-dark) !important;
    transition: all 0.2s ease;
    border-bottom: 1px solid var(--brown-lighter);
  }
  
  .selectize-dropdown-content .option:hover,
  .selectize-dropdown-content .option.active {
    background-color: var(--brown-lighter) !important;
  }
  
  .form-control {
    border: 2px solid var(--dark-orange);
    border-radius: 5px;
  }
  
  .form-control:focus {
    border-color: var(--brown-dark);
    box-shadow: 0 0 0 0.2rem rgba(123, 63, 0, 0.25);
  }
  
  .dataTables_wrapper {
    padding: 10px;
    background-color: white;
    border-radius: 10px;
  }
  
  /* Styling for data table headers */
  table.dataTable thead th {
    background-color: var(--brown-dark) !important;
    color: white !important;
    border-bottom: 2px solid var(--brown-medium) !important;
  }
  
  /* Remove blue selection color in tables */
  table.dataTable tbody tr.selected {
    background-color: var(--brown-lighter) !important;
  }
  
  .dataTables_info, .dataTables_paginate {
    margin-top: 10px !important;
    color: var(--brown-dark) !important;
  }
  
  .paginate_button {
    color: var(--brown-dark) !important;
  }
  
  .paginate_button.current {
    background: var(--brown-light) !important;
    border: 1px solid var(--brown-medium) !important;
  }
  
  .summary-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }
  
  .summary-table th {
    background-color: var(--brown-dark);
    color: white;
    text-align: left;
    padding: 10px;
    font-weight: bold;
  }
  
  .summary-table td {
    padding: 10px;
    border-bottom: 1px solid var(--brown-lighter);
  }
  
  .total-profit {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--brown-dark);
    text-align: center;
    margin-top: 20px;
    padding: 15px;
    background-color: white;
    border-radius: 5px;
    border: 2px solid var(--brown-dark);
  }
  
  .highest-sales {
    font-size: 1.1rem;
    color: var(--brown-dark);
    text-align: center;
    margin-top: 10px;
    padding: 10px;
    background-color: var(--brown-lighter);
    border-radius: 5px;
  }
  
  .time-period-selector {
    background-color: white;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 15px;
  }
  
  .time-period-selector .btn {
    background-color: white;
    color: var(--brown-dark);
    border: 1px solid var(--brown-medium);
    font-weight: bold;
  }
  
    .time-period-selector .btn.active {
    background-color: var(--brown-dark);
    color: white;
    border: 1px solid var(--brown-dark);
  }
  
  /* Animation for card hover effects */
  .card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }
  
  /* Tab styling */
  .nav-tabs {
    border-bottom: 2px solid var(--brown-dark);
    margin-bottom: 20px;
  }
  
  .nav-tabs .nav-link {
    color: var(--brown-dark);
    font-weight: bold;
    border: none;
    background-color: transparent;
    padding: 10px 20px;
    border-radius: 0;
    margin-right: 5px;
    transition: all 0.3s ease;
  }
  
  .nav-tabs .nav-link:hover {
    background-color: var(--brown-lighter);
    border-color: transparent;
  }
  
  .nav-tabs .nav-link.active {
    color: white;
    background-color: var(--brown-dark);
    border-color: transparent;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
  }
  
  /* User feedback notifications */
  .shiny-notification {
    background-color: white;
    border-color: var(--brown-dark);
    color: var(--brown-dark);
    border-radius: 5px;
    padding: 10px 15px;
    margin-bottom: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }
")

# Create the UI using a page with a sidebar layout
ui <- page_sidebar(
  title = "Javier's Store Management System",
  theme = bs_theme(
    version = 5,
    bootswatch = "sandstone", # This gives a warm, sandy look matching brown tones
    primary = "#7B3F00", # Dark brown
    secondary = "#A0522D", # Medium brown
    success = "#28a745",
    danger = "#dc3545", 
    warning = "#ffc107",
    info = "#17a2b8"
  ),
  
  # Add custom CSS
  tags$head(
    tags$style(custom_css),
    # Add favicon and other meta tags for a more website-like appearance
    tags$link(rel = "icon", href = "https://www.freeiconspng.com/uploads/store-icon-10.png"),
    tags$meta(name = "viewport", content = "width=device-width, initial-scale=1.0"),
    tags$meta(name = "description", content = "Javier's Store Management System - Track sales, transactions and analyze business performance"),
    tags$title("Javier's Store - Management System")
  ),
  
  # Enable shinyjs
  shinyjs::useShinyjs(),
  
  # Sidebar with inputs
  sidebar = sidebar(
    width = 300,
    
    # Conditional inputs based on active tab
    conditionalPanel(
      condition = "input.tabs == 'transactions'",
      h4("LOAD / GCASH TRANSACTIONS", class = "sidebar-header"),
      div(class = "sidebar-card",
          dateInput("transaction_date", "Date", value = Sys.Date()),
          textInput("customer_name", "Customer Name:"),
          textInput("mobile", "Mobile Number:"),
          selectInput("type", "Transaction Type:",
                      choices = c("Load", "GCash-In", "GCash-Out")),
          numericInput("totalamount", "Total Amount(₱):", value = 0),
          actionButton("submit", "Save Transaction", class = "btn btn-primary"),
          br(), br(),
          actionButton("deleterow", "Delete Row", class = "btn btn-warning"),
          actionButton("undoBtn", "Undo", class = "btn btn-dark"),
          actionButton("redoBtn", "Redo", class = "btn btn-dark"),
          br(), br(),
          downloadButton("downloadData", "Download Transactions"),
          br(), br()
      )
    ),
    
    conditionalPanel(
      condition = "input.tabs == 'sales'",
      h4("PRODUCT SALES", class = "sidebar-header"),
      div(class = "sidebar-card",
          ## First Row - Category and Product Selection
          dateInput("sale_date", "Date", value = Sys.Date()),
          selectInput("category", "Product Category:", choices = categories),
          selectInput("product", "Product Name:", choices = NULL),
          
          ## Second Row - Costs and Prices (will be auto-populated)
          div(style = "display: flex; gap: 10px;",
              numericInput("unit_cost", "Unit Cost:", value = 0, width = "100%"),
              numericInput("unit_price", "Unit Price:", value = 0, width = "100%")
          ),
          
          ## Third Row - Quantity
          numericInput("quantity", "Quantity:", value = 1, min = 1),
          
          ## Fourth Row - Add Sale Button (Full width)
          actionButton("add_sale", "Add Sale", class = "btn btn-primary btn-block", width = "100%"),
          
          ## Divider
          tags$hr(),
          
          ## Buttons for data management
          div(style = "display: flex; gap: 10px; margin-bottom: 10px;",
              actionButton("undo", "Undo", class = "btn btn-dark", width = "50%"),
              actionButton("redo", "Redo", class = "btn btn-dark", width = "50%")
          ),
          
          div(style = "display: flex; gap: 10px; margin-bottom: 10px;",
              actionButton("delete_sale", "Delete Sale", class = "btn btn-warning", width = "50%"),
              actionButton("clear_sales", "Clear All", class = "btn btn-danger", width = "50%")
          ),
          
          ## Export buttons
          div(style = "display: flex; gap: 10px;",
              downloadButton("export_excel", "Excel", width = "50%"),
              downloadButton("export_csv", "CSV", width = "50%")
          )
      )
    ),
    
    conditionalPanel(
      condition = "input.tabs == 'statistics'",
      h4("Analytics Controls", class = "sidebar-header"),
      div(class = "sidebar-card",
          dateRangeInput("date_range", "Date Range", 
                         start = Sys.Date() - 30, end = Sys.Date()),
          selectInput("chart_type", "Chart Type:", 
                      choices = c("Bar Chart", "Pie Chart", "Line Chart", "Area Chart")),
          selectInput("analysis_type", "Analysis By:", 
                      choices = c("Transaction Type", "Product Category", "Daily Trends", 
                                  "Weekly Trends", "Monthly Trends")),
          checkboxInput("include_transactions", "Include Load/GCash", value = TRUE),
          checkboxInput("include_sales", "Include Product Sales", value = TRUE),
          actionButton("update_stats", "Update Dashboard", class = "btn btn-primary", width = "100%")
      )
    )
  ),
  
  # Main panel with tabsets
  card(
    tabsetPanel(
      id = "tabs",
      tabPanel(
        title = "📋 Transactions", 
        value = "transactions",
        
        # Transactions tab content
        card(
          card_header("Transaction History"),
          DTOutput("data_table"),
          footer = tagList(
            actionButton("clearhistory", "Clear History", class = "btn btn-danger")
          )
        )
      ),
      
      tabPanel(
        title = "🛒 Product Sales", 
        value = "sales",
        
        # Product Sales tab content
        fluidRow(
          # Summary Cards Row
          column(
            width = 12,
            fluidRow(
              column(
                width = 3,
                card(
                  class = "summary-card",
                  card_header("Today's Sales"),
                  card_body(textOutput("today_sales"))
                )
              ),
              column(
                width = 3,
                card(
                  class = "summary-card",
                  card_header("Weekly Sales"),
                  card_body(textOutput("weekly_sales"))
                )
              ),
              column(
                width = 3,
                card(
                  class = "summary-card",
                  card_header("Monthly Sales"),
                  card_body(textOutput("monthly_sales"))
                )
              ),
              column(
                width = 3,
                card(
                  class = "summary-card",
                  card_header("Total Profit"),
                  card_body(textOutput("total_profit"))
                )
              )
            ),
            
            # Time Period Selection - CHange kanina
            fluidRow(
              column(6,
                     selectInput("time_period", "Time Period:", 
                                 choices = c("Daily", "Weekly", "Monthly", "Custom"))
              ),
              column(6,
                     conditionalPanel(
                       condition = "input.time_period != 'Custom'",
                       dateInput("selected_day", "Check and Monitor your Sales on the Day:", value = Sys.Date())
                     ),
                     conditionalPanel(
                       condition = "input.time_period == 'Custom'",
                       dateRangeInput("sales_date_range", "Date Range", 
                                      start = Sys.Date() - 30, end = Sys.Date())
                     )
              )
            ),
            
            # Charts Row
            fluidRow(
              column(
                width = 6,
                card(
                  class = "chart-card",
                  card_header("Sales by Category"),
                  card_body(plotlyOutput("category_chart"))
                )
              ),
              
              column(
                width = 6,
                card(
                  class = "chart-card",
                  card_header("Profit Distribution"),
                  card_body(plotlyOutput("profit_chart"))
                )
              )
            ),
            
            # Sales Data Table
            card(
              class = "sales-table-card",
              card_header("Recent Sales"),
              card_body(DTOutput("sales_table"))
            ),
            
            
            # Sales Summary Table
            card(
              class = "summary-table-card",
              card_header("Sales Summary"),
              card_body(DTOutput("summary_table"))
            )
          )
        )
      ),
      
      tabPanel(
        title = "📊 Analytics", 
        value = "statistics",
        
        # Statistics and visualizations tab content
        fluidRow(
          # Top metrics row
          column(
            width = 12,
            fluidRow(
              column(
                width = 3,
                card(
                  class = "metric-card",
                  card_header("Total Revenue"),
                  card_body(
                    div(
                      style = "text-align: center;",
                      h3(textOutput("total_revenue"), style = "margin: 0; color: #7B3F00;"),
                      p("Combined from all sources")
                    )
                  )
                )
              ),
              column(
                width = 3,
                card(
                  class = "metric-card",
                  card_header("Total Profit"),
                  card_body(
                    div(
                      style = "text-align: center;",
                      h3(textOutput("stats_total_profit"), style = "margin: 0; color: #7B3F00;"),
                      p("Net earnings after costs")
                    )
                  )
                )
              ),
              column(
                width = 3,
                card(
                  class = "metric-card",
                  card_header("Transaction Count"),
                  card_body(
                    div(
                      style = "text-align: center;",
                      h3(textOutput("transaction_count"), style = "margin: 0; color: #7B3F00;"),
                      p("Total number of transactions")
                    )
                  )
                )
              ),
              column(
                width = 3,
                card(
                  class = "metric-card",
                  card_header("Profit Margin"),
                  card_body(
                    div(
                      style = "text-align: center;",
                      h3(textOutput("profit_margin"), style = "margin: 0; color: #7B3F00;"),
                      p("Average profit percentage")
                    )
                  )
                )
              )
            )
          ),
          
          # Main visualization row
          column(
            width = 12,
            fluidRow(
              column(
                width = 8,
                card(
                  card_header("Trends Over Time"),
                  card_body(
                    plotlyOutput("time_series_chart", height = "300px")
                  )
                )
              ),
              column(
                width = 4,
                card(
                  card_header("Revenue Distribution"),
                  card_body(
                    plotlyOutput("revenue_distribution", height = "300px")
                  )
                )
              )
            )
          ),
          
          # Secondary visualization row
          column(
            width = 12,
            fluidRow(
              column(
                width = 6,
                card(
                  card_header("Top Products & Services"),
                  card_body(
                    plotlyOutput("top_items_chart", height = "300px")
                  )
                )
              ),
              column(
                width = 6,
                card(
                  card_header("Daily Performance"),
                  card_body(
                    plotlyOutput("daily_performance", height = "300px")
                  )
                )
              )
            )
          ),
          
          # Data summary tables row
          column(
            width = 12,
            fluidRow(
              column(
                width = 12,
                card(
                  card_header("Transaction Summary"),
                  card_body(
                    DTOutput("transaction_summary_table")
                  )
                )
              ),
              column(
                width = 12,
                card(
                  card_header("Product Sales Summary"),
                  card_body(
                    DTOutput("product_summary_table")
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

# Server logic
server <- function(input, output, session) {
  ###############################################
  # TRANSACTIONS TAB - SERVER LOGIC
  ###############################################
  
  # Reactive values for transaction data
  data <- reactiveVal()
  
  # Read transaction data from file
  read_data <- function() {
    df <- read.csv(data_file, stringsAsFactors = FALSE)
    df$Date <- as.Date(df$Date)
    return(df)
  }
  
  # Initialize with existing data
  data(read_data())
  
  # Save transaction data to file
  save_data <- function(df) {
    history_stack$data <- append(history_stack$data, list(data()))
    redo_stack$data <- list()
    write.csv(df, data_file, row.names = FALSE)
    data(df)
  }
  
  # Handle new transaction submission
  observeEvent(input$submit, {
    req(input$customer_name, input$mobile, input$totalamount)
    
    mobile_digits <- gsub("[^0-9]", "", input$mobile)
    if (nchar(mobile_digits) != 11) {
      showNotification("❌ Invalid mobile number!", type = "error")
      return()
    }
    
    profit <- if(input$type == "Load") {
      if(input$totalamount >=1 & input$totalamount <50) {
        3
      } else if (input$totalamount >=50 & input$totalamount <100) {
        5
      } else if (input$totalamount >=100 & input$totalamount <200) {
        10
      } else if (input$totalamount >=200 & input$totalamount <300) {
        15
      } else if (input$totalamount >=300 & input$totalamount <400) {
        20
      } else if (input$totalamount >=400 & input$totalamount <500) {
        25
      } else if (input$totalamount >=500 & input$totalamount <=1000) {
        50
      } else {
        60
      }
    } else if(input$type %in% c("GCash-In", "GCash-Out")) {
      if (input$totalamount <1) {
        0
      } else if (input$totalamount <=250) {
        5
      } else if (input$totalamount >250 & input$totalamount <=500) {
        10
      } else if (input$totalamount >500 & input$totalamount <=750) {
        15
      } else if (input$totalamount >750 & input$totalamount <=1000) {
        20
      } else if (input$totalamount >1000 & input$totalamount <=1250) {
        25
      } else if (input$totalamount >1250 & input$totalamount <=1500) {
        30
      } else if (input$totalamount >1500 & input$totalamount <=1750) {
        35
      } else if (input$totalamount >1750 & input$totalamount <=2000) {
        40
      } else if (input$totalamount >2000 & input$totalamount <=2250) {
        45
      } else if (input$totalamount >2250 & input$totalamount <=2500) {
        50
      } else if (input$totalamount >2500 & input$totalamount <=2750) {
        55
      } else if (input$totalamount >2750 & input$totalamount <=3000) {
        60
      } else if (input$totalamount >3000 & input$totalamount <=3250) {
        65
      } else if (input$totalamount >3250 & input$totalamount <=3500) {
        70
      } else if (input$totalamount >3500 & input$totalamount <=3750) {
        75
      } else if (input$totalamount >3750 & input$totalamount <=4000) {
        80
      } else if (input$totalamount >4000 & input$totalamount <=4250) {
        85
      } else if (input$totalamount >4250 & input$totalamount <=4500) {
        90
      } else if (input$totalamount >4500 & input$totalamount <=4750) {
        95
      } else if (input$totalamount >4750 & input$totalamount <=5000) {
        100
      } else {
        105
      }
    } else {
      0
    }
    
    new_entry <- data.frame(
      Date = Sys.Date(),
      Customer_Name = input$customer_name,
      Mobile_Number = input$mobile,
      Type = input$type,
      Total_Amount = input$totalamount,  
      Profit = profit,
      stringsAsFactors = FALSE
    )
    
    df <- data()
    updated_df <- rbind(df, new_entry)
    save_data(updated_df)
    
    updateTextInput(session, "customer_name", value = "")
    updateTextInput(session, "mobile", value = "")
    updateNumericInput(session, "totalamount", value = 0)
    
    showNotification("✅ Transaction Saved!", type = "message")
  })
  
  # Delete selected row
  observeEvent(input$deleterow, {
    req(input$data_table_rows_selected)
    selected_row <- input$data_table_rows_selected
    df <- data()
    df <- df[-selected_row, ]
    save_data(df)
  })
  
  # Clear transaction history
  observeEvent(input$clearhistory, {
    empty_df <- data.frame(
      Date = as.Date(character()),
      Customer_Name = character(),
      Mobile_Number = character(),
      Type = character(),
      Total_Amount = numeric(),
      Profit = numeric(),
      stringsAsFactors = FALSE
    )
    write.csv(empty_df, data_file, row.names = FALSE)
    data(empty_df)  
    showNotification("🧹 History cleared successfully!", type = "message")
  })
  
  # Render transaction table
  output$data_table <- renderDT({
    datatable(data(), escape = FALSE, selection = "single")
  })
  
  # Download transaction data
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("transactions-", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(data(), file, row.names = FALSE)
    }
  )
  
  # Undo transaction
  observeEvent(input$undoBtn, {
    if (length(history_stack$data) > 0) {
      last_state <- tail(history_stack$data, 1)[[1]]
      history_stack$data <- head(history_stack$data, -1)
      
      redo_stack$data <- append(redo_stack$data, list(data()))
      
      write.csv(last_state, data_file, row.names = FALSE)
      data(last_state)
      showNotification("↩️ Undo successful!", type = "message")
    } else {
      showNotification("⚠️ Nothing to undo!", type = "warning")
    }
  })
  
  # Redo transaction
  observeEvent(input$redoBtn, {
    if (length(redo_stack$data) > 0) {
      next_state <- tail(redo_stack$data, 1)[[1]]
      redo_stack$data <- head(redo_stack$data, -1)
      
      history_stack$data <- append(history_stack$data, list(data()))
      
      write.csv(next_state, data_file, row.names = FALSE)
      data(next_state)
      showNotification("🔁 Redo successful!", type = "message")
    } else {
      showNotification("⚠️ Nothing to redo!", type = "warning")
    }
  })
  
  ###############################################
  # PRODUCT SALES TAB - SERVER LOGIC
  ###############################################
  
  # Reactive values for sales data
  rv <- reactiveValues(
    sales_data = sales_data,
    history = list(),
    redo = list()
  )
  
  # Save sales data to file
  save_sales_data <- function(data) {
    rv$history <- append(rv$history, list(rv$sales_data))
    rv$redo <- list()
    rv$sales_data <- data
    saveRDS(data, saveDataPath)
  }
  
  # Update product dropdown based on selected category
  observe({
    selected_category <- input$category
    if (selected_category %in% names(product_data)) {
      products <- product_data[[selected_category]]$`Product Name`
      updateSelectInput(session, "product", choices = products)
    }
  })
  
  # Update cost and price fields based on selected product
  observe({
    selected_category <- input$category
    selected_product <- input$product
    if (!is.null(selected_category) && !is.null(selected_product) && selected_category %in% names(product_data)) {
      product_df <- product_data[[selected_category]]
      product_row <- which(product_df$`Product Name` == selected_product)
      
      if (length(product_row) > 0) {
        unit_cost <- product_df$`Unit Cost (PHP)`[product_row]
        unit_price <- product_df$`Unit Price (PHP)`[product_row]
        
        updateNumericInput(session, "unit_cost", value = unit_cost)
        updateNumericInput(session, "unit_price", value = unit_price)
      }
    }
  })
  
  # Add new sale
  observeEvent(input$add_sale, {
    req(input$sale_date, input$category, input$product, input$quantity, input$unit_cost, input$unit_price)
    
    if (input$quantity <= 0) {
      showNotification("Quantity must be greater than zero", type = "error")
      return()
    }
    
    profit <- (input$unit_price - input$unit_cost) * input$quantity
    
    new_sale <- data.frame(
      Date = Sys.Date(),
      Category = input$category,
      Product = input$product,
      Quantity = input$quantity,
      Unit_Cost = input$unit_cost,
      Unit_Price = input$unit_price,
      Profit = profit,
      stringsAsFactors = FALSE
    )
    
    updated_sales <- rbind(rv$sales_data, new_sale)
    save_sales_data(updated_sales)
    
    # Reset quantity to 1
    updateNumericInput(session, "quantity", value = 1)
    
    showNotification("✅ Sale added successfully!", type = "message")
  })
  
  # Undo sales action
  observeEvent(input$undo, {
    if (length(rv$history) > 0) {
      last_state <- tail(rv$history, 1)[[1]]
      rv$history <- head(rv$history, -1)
      
      rv$redo <- append(rv$redo, list(rv$sales_data))
      rv$sales_data <- last_state
      
      saveRDS(last_state, saveDataPath)
      showNotification("↩️ Undo successful!", type = "message")
    } else {
      showNotification("⚠️ Nothing to undo!", type = "warning")
    }
  })
  
  # Redo sales action
  observeEvent(input$redo, {
    if (length(rv$redo) > 0) {
      next_state <- tail(rv$redo, 1)[[1]]
      rv$redo <- head(rv$redo, -1)
      
      rv$history <- append(rv$history, list(rv$sales_data))
      rv$sales_data <- next_state
      
      saveRDS(next_state, saveDataPath)
      showNotification("🔁 Redo successful!", type = "message")
    } else {
      showNotification("⚠️ Nothing to redo!", type = "warning")
    }
  })
  
  # Delete selected sale
  observeEvent(input$delete_sale, {
    req(input$sales_table_rows_selected)
    
    selected_row <- input$sales_table_rows_selected
    updated_sales <- rv$sales_data[-selected_row, ]
    save_sales_data(updated_sales)
    
    showNotification("🗑️ Sale deleted successfully!", type = "message")
  })
  
  # Clear all sales
  observeEvent(input$clear_sales, {
    showModal(modalDialog(
      title = "Confirm Clear All Sales",
      "Are you sure you want to delete all sales data? This action cannot be undone.",
      footer = tagList(
        modalButton("Cancel"),
        actionButton("confirm_clear", "Yes, Clear All", class = "btn btn-danger")
      )
    ))
  })
  
  # Confirm clear all sales
  observeEvent(input$confirm_clear, {
    empty_df <- data.frame(
      Date = as.Date(character()),
      Category = character(),
      Product = character(),
      Quantity = numeric(),
      Unit_Cost = numeric(),
      Unit_Price = numeric(),
      Profit = numeric(),
      stringsAsFactors = FALSE
    )
    save_sales_data(empty_df)
    removeModal()
    showNotification("🧹 All sales data cleared!", type = "message")
  })
  
  # Make sure all visuals update when selected_day changes
  observeEvent(input$selected_day, {
    # This will force all reactive elements to update
  }, ignoreInit = TRUE)
  
  # Export to Excel
  output$export_excel <- downloadHandler(
    filename = function() {
      paste("sales-data-", Sys.Date(), ".xlsx", sep = "")
    },
    content = function(file) {
      write_xlsx(rv$sales_data, file)
    }
  )
  
  # Export to CSV
  output$export_csv <- downloadHandler(
    filename = function() {
      paste("sales-data-", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(rv$sales_data, file, row.names = FALSE)
    }
  )
  
  # Filter sales by time period
  filtered_sales <- reactive({
    sales_df <- rv$sales_data
    
    if (nrow(sales_df) == 0) {
      return(sales_df)
    }
    
    # Always use the selected_day input when available
    selected_date <- if (!is.null(input$selected_day)) input$selected_day else Sys.Date()
    
    # If custom date range is selected
    if (input$time_period == "Custom") {
      if (!is.null(input$sales_date_range)) {
        sales_df <- sales_df[sales_df$Date >= input$sales_date_range[1] & 
                               sales_df$Date <= input$sales_date_range[2], ]
      }
    } else if (input$time_period == "Daily") {
      sales_df <- sales_df[sales_df$Date == selected_date, ]
    } else if (input$time_period == "Weekly") {
      start_date <- selected_date - 7
      sales_df <- sales_df[sales_df$Date >= start_date & sales_df$Date <= selected_date, ]
    } else if (input$time_period == "Monthly") {
      selected_month <- format(selected_date, "%Y-%m")
      sales_df$Month <- format(sales_df$Date, "%Y-%m")
      sales_df <- sales_df[sales_df$Month == selected_month, ]
      sales_df$Month <- NULL
    }
    
    return(sales_df)
  })
  
  # Sales summary calculations
  sales_summary <- reactive({
    sales_df <- filtered_sales()
    
    if (nrow(sales_df) == 0) {
      return(list(
        today = 0,
        weekly = 0,
        monthly = 0,
        total_profit = 0
      ))
    }
    
    # Always use the selected_day input when available
    selected_date <- if (!is.null(input$selected_day)) input$selected_day else Sys.Date()
    one_week_ago <- selected_date - 7
    selected_month <- format(selected_date, "%Y-%m")
    
    # Get all sales data
    all_sales <- rv$sales_data
    
    # Daily sales for selected date
    today_sales <- sum(all_sales$Profit[all_sales$Date == selected_date])
    
    # Weekly sales (7 days ending on selected date)
    weekly_sales <- sum(all_sales$Profit[all_sales$Date >= one_week_ago & all_sales$Date <= selected_date])
    
    # Monthly sales for the month of the selected date
    monthly_df <- all_sales
    monthly_df$Month <- format(monthly_df$Date, "%Y-%m")
    monthly_sales <- sum(monthly_df$Profit[monthly_df$Month == selected_month])
    
    # Total profit for the filtered data
    total_profit <- sum(sales_df$Profit)
    
    return(list(
      today = today_sales,
      weekly = weekly_sales,
      monthly = monthly_sales,
      total_profit = total_profit
    ))
  })
  
  # Sales summary table
  output$summary_table <- renderDT({
    sales_df <- filtered_sales()
    
    if (nrow(sales_df) == 0) {
      return(data.frame(
        Category = character(),
        `Total Sales` = numeric(),
        `Total Profit` = numeric(),
        `Items Sold` = numeric()
      ))
    }
    
    # Create summary by category
    summary_df <- sales_df %>%
      group_by(Category) %>%
      summarize(
        `Total Sales` = sum(Unit_Price * Quantity),
        `Total Profit` = sum(Profit),
        `Items Sold` = sum(Quantity)
      ) %>%
      arrange(desc(`Total Profit`))
    
    datatable(
      summary_df,
      options = list(
        pageLength = 5,
        dom = 'tip',
        ordering = TRUE
      ),
      rownames = FALSE
    ) %>%
      formatCurrency(c("Total Sales", "Total Profit"), currency = "₱", digits = 2)
  })
  
  # Render sales table with DT
  output$sales_table <- renderDT({
    sales_df <- filtered_sales()
    
    if (nrow(sales_df) == 0) {
      return(sales_df)
    }
    
    # Add a Total column for display purposes
    sales_df$Total <- sales_df$Unit_Price * sales_df$Quantity
    
    # Reorder and rename columns for display
    display_df <- sales_df %>%
      select(Date, Category, Product, Quantity, 
             `Unit Cost` = Unit_Cost, 
             `Unit Price` = Unit_Price, 
             Total, Profit)
    
    datatable(
      display_df,
      options = list(
        pageLength = 10,
        order = list(list(0, 'desc')),
        dom = 'rtip'
      ),
      selection = 'single',
      rownames = FALSE
    ) %>%
      formatCurrency(c("Unit Cost", "Unit Price", "Total", "Profit"), currency = "₱", digits = 2)
  })
  
  # Create bar chart for sales by category
  output$category_chart <- renderPlotly({
    sales_df <- filtered_sales()
    
    if (nrow(sales_df) == 0) {
      return(NULL)
    }
    
    category_summary <- sales_df %>%
      group_by(Category) %>%
      summarize(Total = sum(Profit)) %>%
      arrange(desc(Total))
    
    p <- plot_ly(
      category_summary,
      x = ~Category,
      y = ~Total,
      type = "bar",
      marker = list(color = "#7B3F00"),
      text = ~paste("₱", format(Total, big.mark = ",", digits = 2)),
      hoverinfo = "text"
    ) %>%
      layout(
        title = "",
        xaxis = list(title = ""),
        yaxis = list(title = "Profit (₱)"),
        margin = list(b = 80),
        hovermode = "closest"
      )
    
    return(p)
  })
  
  # Create pie chart for profit distribution
  output$profit_chart <- renderPlotly({
    sales_df <- filtered_sales()
    
    if (nrow(sales_df) == 0) {
      return(NULL)
    }
    
    product_summary <- sales_df %>%
      group_by(Product) %>%
      summarize(Total = sum(Profit)) %>%
      arrange(desc(Total))
    
    # Limit to top 5 products for readability
    if (nrow(product_summary) > 5) {
      others <- data.frame(
        Product = "Others",
        Total = sum(product_summary$Total[6:nrow(product_summary)])
      )
      product_summary <- rbind(product_summary[1:5, ], others)
    }
    
    colors <- c("#7B3F00", "#A0522D", "#CD853F", "#DEB887", "#F5DEB3", "#D2B48C")
    p <- plot_ly(
      product_summary,
      labels = ~Product,
      values = ~Total,
      type = "pie",
      marker = list(colors = colors),
      textinfo = "label+percent",
      hoverinfo = "text",
      text = ~paste(Product, "\n₱", format(Total, big.mark = ",", digits = 2))
    ) %>%
      layout(
        title = "",
        showlegend = FALSE,
        margin = list(l = 20, r = 20, t = 30, b = 0),
        hovermode = "closest"
      )
    
    return(p)
  })
  
  # Display summary statistics
  output$today_sales <- renderText({
    summary <- sales_summary()
    paste0("₱", format(summary$today, big.mark = ",", digits = 2))
  })
  
  output$weekly_sales <- renderText({
    summary <- sales_summary()
    paste0("₱", format(summary$weekly, big.mark = ",", digits = 2))
  })
  
  output$monthly_sales <- renderText({
    summary <- sales_summary()
    paste0("₱", format(summary$monthly, big.mark = ",", digits = 2))
  })
  
  output$total_profit <- renderText({
    summary <- sales_summary()
    paste0("₱", format(summary$total_profit, big.mark = ",", digits = 2))
  })
  
  ###############################################
  # STATISTICS TAB - SERVER LOGIC
  ###############################################
  
  # Combined data for statistics
  combined_data <- reactive({
    # Get transactions data
    transactions <- read_data()
    
    if (nrow(transactions) > 0) {
      transactions$Source <- "Transactions"
      transactions$Category <- transactions$Type
      transactions$Revenue <- transactions$Total_Amount
      transactions <- transactions %>%
        select(Date, Source, Category, Revenue, Profit)
    }
    
    # Get sales data
    sales <- rv$sales_data
    
    if (nrow(sales) > 0) {
      sales$Source <- "Product Sales"
      sales$Revenue <- sales$Unit_Price * sales$Quantity
      sales <- sales %>%
        select(Date, Source, Category, Revenue, Profit)
    }
    
    # Combine both datasets
    combined <- rbind(
      if(nrow(transactions) > 0 && input$include_transactions) transactions else NULL,
      if(nrow(sales) > 0 && input$include_sales) sales else NULL
    )
    
    # Filter by date range
    if (!is.null(input$date_range)) {
      combined <- combined %>%
        filter(Date >= input$date_range[1] & Date <= input$date_range[2])
    }
    
    return(combined)
  })
  
  # Update statistics when button is clicked
  observeEvent(input$update_stats, {
    # This will trigger all the reactive outputs to update
  })
  
  # Total revenue output
  output$total_revenue <- renderText({
    data <- combined_data()
    if (nrow(data) == 0) return("₱0")
    
    total <- sum(data$Revenue)
    paste0("₱", format(total, big.mark = ",", digits = 2))
  })
  
  # Total profit output
  output$stats_total_profit <- renderText({
    data <- combined_data()
    if (nrow(data) == 0) return("₱0")
    
    total <- sum(data$Profit)
    paste0("₱", format(total, big.mark = ",", digits = 2))
  })
  
  # Transaction count output
  output$transaction_count <- renderText({
    data <- combined_data()
    if (nrow(data) == 0) return("0")
    
    count <- nrow(data)
    format(count, big.mark = ",")
  })
  
  # Profit margin output
  output$profit_margin <- renderText({
    data <- combined_data()
    if (nrow(data) == 0) return("0%")
    
    total_revenue <- sum(data$Revenue)
    total_profit <- sum(data$Profit)
    
    if (total_revenue == 0) return("0%")
    
    margin <- (total_profit / total_revenue) * 100
    paste0(round(margin, 1), "%")
  })
  
  # Time series chart
  output$time_series_chart <- renderPlotly({
    data <- combined_data()
    if (nrow(data) == 0) return(NULL)
    
    # Aggregate data by date
    daily_data <- data %>%
      group_by(Date, Source) %>%
      summarize(
        Revenue = sum(Revenue),
        Profit = sum(Profit),
        .groups = 'drop'
      )
    
    # Create time series plot
    p <- plot_ly() %>%
      add_trace(
        data = daily_data,
        x = ~Date,
        y = ~Profit,
        color = ~Source,
        type = 'scatter',
        mode = 'lines+markers',
        name = ~Source,
        line = list(width = 2),
        marker = list(size = 6)
      ) %>%
      layout(
        title = "",
        xaxis = list(title = "Date"),
        yaxis = list(title = "Profit (₱)"),
        hovermode = "x unified",
        legend = list(orientation = "h", y = 1.1)
      )
    
    return(p)
  })
  
  # Revenue distribution pie chart
  output$revenue_distribution <- renderPlotly({
    data <- combined_data()
    if (nrow(data) == 0) return(NULL)
    
    # Aggregate data by source
    source_data <- data %>%
      group_by(Source) %>%
      summarize(
        Revenue = sum(Revenue),
        Profit = sum(Profit),
        .groups = 'drop'
      )
    
    # Create pie chart
    colors <- c("#7B3F00", "#CD853F")
    
    p <- plot_ly(
      source_data,
      labels = ~Source,
      values = ~Revenue,
      type = "pie",
      marker = list(colors = colors),
      textinfo = "label+percent",
      hoverinfo = "text",
      text = ~paste(Source, "\n₱", format(Revenue, big.mark = ",", digits = 2))
    ) %>%
      layout(
        title = "",
        showlegend = FALSE,
        margin = list(l = 20, r = 20, t = 30, b = 0)
      )
    
    return(p)
  })
  
  # Top items chart
  output$top_items_chart <- renderPlotly({
    data <- combined_data()
    if (nrow(data) == 0) return(NULL)
    
    # Determine what to display based on analysis type
    if (input$analysis_type == "Transaction Type") {
      # For transactions, group by type
      category_data <- data %>%
        group_by(Category) %>%
        summarize(
          Revenue = sum(Revenue),
          Profit = sum(Profit),
          .groups = 'drop'
        ) %>%
        arrange(desc(Profit)) %>%
        head(10)
      
      # Create horizontal bar chart
      p <- plot_ly(
        category_data,
        y = ~reorder(Category, Profit),
        x = ~Profit,
        type = "bar",
        orientation = 'h',
        marker = list(color = "#7B3F00"),
        text = ~paste("₱", format(Profit, big.mark = ",", digits = 2)),
        hoverinfo = "text"
      ) %>%
        layout(
          title = "",
          xaxis = list(title = "Profit (₱)"),
          yaxis = list(title = ""),
          margin = list(l = 120)
        )
      
    } else if (input$analysis_type == "Product Category") {
      # For product sales, focus on product categories
      product_data <- data %>%
        filter(Source == "Product Sales") %>%
        group_by(Category) %>%
        summarize(
          Revenue = sum(Revenue),
          Profit = sum(Profit),
          .groups = 'drop'
        ) %>%
        arrange(desc(Profit)) %>%
        head(10)
      
      if (nrow(product_data) == 0) {
        return(NULL)
      }
      
      # Create horizontal bar chart
      p <- plot_ly(
        product_data,
        y = ~reorder(Category, Profit),
        x = ~Profit,
        type = "bar",
        orientation = 'h',
        marker = list(color = "#CD853F"),
        text = ~paste("₱", format(Profit, big.mark = ",", digits = 2)),
        hoverinfo = "text"
      ) %>%
        layout(
          title = "",
          xaxis = list(title = "Profit (₱)"),
          yaxis = list(title = ""),
          margin = list(l = 120)
        )
    } else {
      # For other analysis types
      p <- NULL
    }
    
    return(p)
  })
  
  # Daily performance chart
  output$daily_performance <- renderPlotly({
    data <- combined_data()
    if (nrow(data) == 0) return(NULL)
    
    # Aggregate by day of week
    data$Day <- weekdays(data$Date)
    data$Day <- factor(data$Day, levels = c("Monday", "Tuesday", "Wednesday", 
                                            "Thursday", "Friday", "Saturday", "Sunday"))
    
    daily_perf <- data %>%
      group_by(Day) %>%
      summarize(
        Revenue = sum(Revenue),
        Profit = sum(Profit),
        Count = n(),
        .groups = 'drop'
      )
    
    # Create bar chart
    p <- plot_ly(
      daily_perf,
      x = ~Day,
      y = ~Profit,
      type = "bar",
      marker = list(color = "#A0522D"),
      text = ~paste("₱", format(Profit, big.mark = ",", digits = 2), 
                    "\nTransactions:", Count),
      hoverinfo = "text"
    ) %>%
      layout(
        title = "",
        xaxis = list(title = ""),
        yaxis = list(title = "Profit (₱)")
      )
    
    return(p)
  })
  
  # Transaction summary table
  output$transaction_summary_table <- renderDT({
    data <- combined_data()
    if (nrow(data) == 0 || !input$include_transactions) {
      return(NULL)
    }
    
    # Filter for transactions only
    trans_data <- data %>%
      filter(Source == "Transactions")
    
    if (nrow(trans_data) == 0) {
      return(NULL)
    }
    
    # Create summary by transaction type
    summary_df <- trans_data %>%
      group_by(Category) %>%
      summarize(
        `Transaction Count` = n(),
        `Total Revenue` = sum(Revenue),
        `Total Profit` = sum(Profit),
        `Avg. Revenue` = mean(Revenue),
        `Avg. Profit` = mean(Profit),
        .groups = 'drop'
      ) %>%
      arrange(desc(`Total Profit`))
    
    datatable(
      summary_df,
      options = list(
        pageLength = 5,
        dom = 'tip',
        ordering = TRUE
      ),
      rownames = FALSE
    ) %>%
      formatCurrency(c("Total Revenue", "Total Profit", "Avg. Revenue", "Avg. Profit"), 
                     currency = "₱", digits = 2)
  })
  
  # Product summary table
  output$product_summary_table <- renderDT({
    data <- combined_data()
    if (nrow(data) == 0 || !input$include_sales) {
      return(NULL)
    }
    
    # Filter for product sales only
    sales_data <- data %>%
      filter(Source == "Product Sales")
    
    if (nrow(sales_data) == 0) {
      return(NULL)
    }
    
    # Create summary by product category
    summary_df <- sales_data %>%
      group_by(Category) %>%
      summarize(
        `Items Count` = n(),
        `Total Revenue` = sum(Revenue),
        `Total Profit` = sum(Profit),
        `Profit Margin (%)` = round(sum(Profit) / sum(Revenue) * 100, 1),
        .groups = 'drop'
      ) %>%
      arrange(desc(`Total Profit`))
    
    datatable(
      summary_df,
      options = list(
        pageLength = 5,
        dom = 'tip',
        ordering = TRUE
      ),
      rownames = FALSE
    ) %>%
      formatCurrency(c("Total Revenue", "Total Profit"), currency = "₱", digits = 2) %>%
      formatPercentage("Profit Margin (%)", digits = 1)
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
