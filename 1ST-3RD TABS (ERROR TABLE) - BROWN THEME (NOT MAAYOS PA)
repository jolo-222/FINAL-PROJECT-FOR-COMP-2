library(shiny)
library(DT)
library(shinyjs)
library(bslib)
library(readxl)
library(ggplot2)
library(plotly)
library(scales)

# File paths
data_file <- "transactions.csv"
sales_file <- "sales_records.csv"
product_file <- "STORE_JAVIER_FINAL.xlsx"

# Initialize transaction data file if not exists
if (!file.exists(data_file)) {
  write.csv(data.frame(
    Date = as.Date(character()),
    Customer_Name = character(),
    Mobile_Number = character(),
    Type = character(),
    Total_Amount = numeric(),
    Profit = numeric(),
    stringsAsFactors = FALSE
  ), data_file, row.names = FALSE)
}

# Initialize sales data file if not exists
if (!file.exists(sales_file)) {
  write.csv(data.frame(
    Date = as.Date(character()),
    ProductCategory = character(),
    BrandProduct = character(),
    Quantity = numeric(),
    UnitCost = numeric(),
    UnitPrice = numeric(),
    Profit = numeric(),
    stringsAsFactors = FALSE
  ), sales_file, row.names = FALSE)
}

# Create reactive values for undo/redo functionality
history_stack <- reactiveValues(data = list())
redo_stack <- reactiveValues(data = list())
sales_history_stack <- reactiveValues(data = list())
sales_redo_stack <- reactiveValues(data = list())

# Brown theme colors
theme_colors <- list(
  dark = "#7B3F00",     # Dark brown
  medium = "#A0522D",   # Medium brown
  light = "#CD853F",    # Light brown
  lighter = "#DEB887",  # Very light brown
  off_white = "#FFF5EB", # Light orange background
  dark_orange = "#FF8C00" # Dark orange for borders
)

# UI with brown theme
ui <- page_sidebar(
  theme = bs_theme(
    version = 5,
    bootswatch = "flatly",
    primary = theme_colors$medium,
    secondary = theme_colors$light,
    success = theme_colors$dark_orange,
    info = theme_colors$light,
    warning = theme_colors$dark_orange,
    danger = "#DC3545",
    base_fg = theme_colors$dark,
    bg = theme_colors$off_white,
    fg = theme_colors$dark
  ) %>% bs_add_rules(paste0(
    ".card { border-color: ", theme_colors$medium, "; }
     .card-header { background-color: ", theme_colors$lighter, "; color: ", theme_colors$dark, "; }
     .btn-primary { background-color: ", theme_colors$medium, "; border-color: ", theme_colors$dark, "; }
     .btn-primary:hover { background-color: ", theme_colors$dark, "; border-color: ", theme_colors$dark, "; }
     .sidebar { background-color: ", theme_colors$lighter, "; }
     .value-box { border-color: ", theme_colors$medium, "; }"
  )),
  
  useShinyjs(),
  title = "Store Management System",
  
  sidebar = sidebar(
    conditionalPanel(
      condition = "input.tabs == 'Transactions'",
      card(
        card_header("Transaction Entry"),
        textInput("customer_name", "Customer Name:"),
        textInput("mobile", "Mobile Number:"),
        selectInput("type", "Transaction Type:",
                    choices = c("Load", "GCash-In", "GCash-Out")),
        numericInput("totalamount", "Total Amount(‚Ç±):", value = 0),
        card_footer(
          actionButton("submit", "üíæ Save Transaction", class = "btn btn-primary w-100")
        )
      ),
      
      card(
        card_header("Actions"),
        layout_column_wrap(
          width = 1/2,
          actionButton("deleterow", "üóëÔ∏è Delete Row", class = "btn btn-warning w-100"),
          actionButton("clearhistory", "üßπ Clear All", class = "btn btn-danger w-100")
        ),
        br(),
        layout_column_wrap(
          width = 1/2,
          actionButton("undoBtn", "‚Ü©Ô∏è Undo", class = "btn btn-dark w-100"),
          actionButton("redoBtn", "üîÑ Redo", class = "btn btn-dark w-100")
        ),
        br(),
        downloadButton("downloadData", "üì• Download Transactions", class = "w-100")
      )
    ),
    
    conditionalPanel(
      condition = "input.tabs == 'Sales'",
      card(
        card_header("Product Entry"),
        selectInput("product_category", "Product Category:", 
                    choices = c("A. Canned Goods", "B. Noodles", "C. Snacks / Biscuits", 
                                "D. Drinks / Beverages", "E. Condiments & Cooking Essentials", 
                                "F. Hygiene Products", "G. Cigarettes", "H. Ice/Ice Candy", 
                                "I. Household Items", "J. Others")),
        conditionalPanel(
          condition = "input.product_category == 'J. Others'",
          textInput("other_product", "Specify Product:")
        ),
        uiOutput("product_selector"),
        numericInput("quantity", "Quantity:", 1, min = 1),
        card_footer(
          actionButton("add_sale", "üìù Add and Record Sale", class = "btn btn-primary w-100")
        )
      ),
      
      card(
        card_header("Actions"),
        layout_column_wrap(
          width = 1/2,
          actionButton("delete_sale_row", "üóëÔ∏è Delete Row", class = "btn btn-warning w-100"),
          actionButton("clear_sales", "üßπ Clear All", class = "btn btn-danger w-100")
        ),
        br(),
        layout_column_wrap(
          width = 1/2,
          actionButton("undo_sale", "‚Ü©Ô∏è Undo", class = "btn btn-dark w-100"),
          actionButton("redo_sale", "üîÑ Redo", class = "btn btn-dark w-100")
        ),
        br(),
        downloadButton("download_sales", "üì• Download (CSV)", class = "w-100 mb-2"),
        downloadButton("download_sales_excel", "üìä Download (Excel)", class = "w-100")
      )
    )
  ),
  
  navset_card_tab(
    id = "tabs",
    nav_panel(
      title = "üìã Transactions",
      value = "Transactions",
      DTOutput("data_table")
    ),
    nav_panel(
      title = "üõí Sales Records",
      value = "Sales",
      DTOutput("sales_table"),
      br(),
      layout_column_wrap(
        width = 1/2,
        card(
          card_header("Today's Sales by Category"),
          plotlyOutput("sales_by_category", height = "300px")
        ),
        card(
          card_header("Profit by Category"),
          plotlyOutput("profit_by_category", height = "300px")
        )
      ),
      br(),
      card(
        card_header("Sales Summary"),
        layout_column_wrap(
          width = 1/3,
          value_box(
            title = "Total Sales Today",
            value = textOutput("total_sales_today"),
            showcase = bsicons::bs_icon("cart-check")
          ),
          value_box(
            title = "Total Profit Today",
            value = textOutput("total_profit_today"),
            showcase = bsicons::bs_icon("wallet2"),
            theme = "success"
          ),
          value_box(
            title = "Highest Selling Category",
            value = textOutput("highest_category"),
            showcase = bsicons::bs_icon("star"),
            theme = "warning"
          )
        )
      )
    ),
    nav_panel(
      title = "üìä Statistics",
      value = "Statistics",
      layout_column_wrap(
        width = 1/2,
        card(
          card_header("Transaction Statistics"),
          layout_column_wrap(
            width = 1/3,
            value_box(
              title = "Total Transactions",
              value = textOutput("total_transactions"),
              showcase = bsicons::bs_icon("list-check")
            ),
            value_box(
              title = "Total GCash Profit",
              value = textOutput("total_gcash_profit"),
              showcase = bsicons::bs_icon("cash-coin"),
              theme = "success"
            ),
            value_box(
              title = "Total Sales Profit",
              value = textOutput("total_sales_profit"),
              showcase = bsicons::bs_icon("shop"),
              theme = "warning"
            )
          )
        ),
        card(
          card_header("Combined Profit Trend"),
          selectInput("profit_period", "Select Period:",
                      choices = c("Daily", "Weekly", "Monthly", "Annually"),
                      selected = "Daily"),
          plotlyOutput("combined_profit_trend", height = "300px")
        )
      ),
      br(),
      layout_column_wrap(
        width = 1/2,
        card(
          card_header("GCash/Load Transactions"),
          plotlyOutput("transaction_pie", height = "300px")
        ),
        card(
          card_header("Sales by Category"),
          plotlyOutput("sales_distribution", height = "300px")
        )
      ),
      br(),
      card(
        card_header("Detailed Profit Analysis"),
        navset_card_tab(
          nav_panel(
            title = "GCash/Load Profit",
            plotlyOutput("gcash_profit_analysis", height = "300px")
          ),
          nav_panel(
            title = "Sales Profit",
            plotlyOutput("sales_profit_analysis", height = "300px")
          ),
          nav_panel(
            title = "Combined Profit",
            plotlyOutput("combined_profit_analysis", height = "300px")
          )
        )
      )
    )
  )
)

server <- function(input, output, session) {
  # Reactive values for transaction and sales data
  transaction_data <- reactiveVal()
  sales_data <- reactiveVal()
  
  # Product data from Excel
  product_data <- reactive({
    # Try to read the Excel file, return NULL if it doesn't exist
    tryCatch({
      all_sheets <- excel_sheets(product_file)
      
      # Load all sheets into a list
      sheet_data <- lapply(all_sheets, function(sheet) {
        sheet_df <- read_excel(product_file, sheet = sheet)
        sheet_df$Category <- sheet  # Add category information
        return(sheet_df)
      })
      
      # Combine all sheets
      do.call(rbind, sheet_data)
    }, error = function(e) {
      showNotification("Error loading product data. Using dummy data instead.", type = "warning")
      # Return dummy data if Excel file can't be read
      data.frame(
        Category = c("A", "A", "B", "B", "C"),
        Brand = c("Product1", "Product2", "Product3", "Product4", "Product5"),
        UnitCost = c(10, 15, 8, 12, 20),
        UnitPrice = c(15, 20, 12, 18, 30),
        stringsAsFactors = FALSE
      )
    })
  })
  
  # Read transaction data
  read_transactions <- function() {
    df <- read.csv(data_file, stringsAsFactors = FALSE)
    df$Date <- as.Date(df$Date)
    return(df)
  }
  
  # Read sales data
  read_sales <- function() {
    df <- read.csv(sales_file, stringsAsFactors = FALSE)
    df$Date <- as.Date(df$Date)
    return(df)
  }
  
  # Initialize data
  transaction_data(read_transactions())
  sales_data(read_sales())
  
  # Save transaction data
  save_transactions <- function(df) {
    history_stack$data <- append(history_stack$data, list(transaction_data()))
    redo_stack$data <- list()
    write.csv(df, data_file, row.names = FALSE)
    transaction_data(df)
  }
  
  # Save sales data
  save_sales <- function(df) {
    sales_history_stack$data <- append(sales_history_stack$data, list(sales_data()))
    sales_redo_stack$data <- list()
    write.csv(df, sales_file, row.names = FALSE)
    sales_data(df)
  }
  
  # Product selector UI
  output$product_selector <- renderUI({
    req(input$product_category)
    
    category_code <- substr(input$product_category, 1, 1)
    
    if (input$product_category == "J. Others") {
      return(NULL)  # For "Others" category, use the text input instead
    }
    
    products <- product_data()[product_data()$Category == category_code, "Brand"]
    
    selectInput("product_brand", "Brand/Product:", choices = products)
  })
  
  # Add transaction
  observeEvent(input$submit, {
    req(input$customer_name, input$mobile, input$totalamount)
    
    mobile_digits <- gsub("[^0-9]", "", input$mobile)
    if (nchar(mobile_digits) != 11) {
      showNotification("‚ùå Invalid mobile number!", type = "error")
      return()
    }
    
    profit <- if(input$type == "Load") {
      if(input$totalamount >=1 & input$totalamount <50) {
        3
      } else if (input$totalamount >=50 & input$totalamount <100) {
        5
      } else if (input$totalamount >=100 & input$totalamount <200) {
        10
      } else if (input$totalamount >=200 & input$totalamount <300) {
        15
      } else if (input$totalamount >=300 & input$totalamount <400) {
        20
      } else if (input$totalamount >=400 & input$totalamount <500) {
        25
      } else if (input$totalamount >=500 & input$totalamount <=1000) {
        50
      } else {
        60
      }
    } else if(input$type %in% c("GCash-In", "GCash-Out")) {
      if (input$totalamount <1) {
        0
      } else if (input$totalamount <=250) {
        5
      } else if (input$totalamount >250 & input$totalamount <=500) {
        10
      } else if (input$totalamount >500 & input$totalamount <=750) {
        15
      } else if (input$totalamount >750 & input$totalamount <=1000) {
        20
      } else if (input$totalamount >1000 & input$totalamount <=1250) {
        25
      } else if (input$totalamount >1250 & input$totalamount <=1500) {
        30
      } else if (input$totalamount >1500 & input$totalamount <=1750) {
        35
      } else if (input$totalamount >1750 & input$totalamount <=2000) {
        40
      } else if (input$totalamount >2000 & input$totalamount <=2250) {
        45
      } else if (input$totalamount >2250 & input$totalamount <=2500) {
        50
      } else if (input$totalamount >2500 & input$totalamount <=2750) {
        55
      } else if (input$totalamount >2750 & input$totalamount <=3000) {
        60
      } else if (input$totalamount >3000 & input$totalamount <=3250) {
        65
      } else if (input$totalamount >3250 & input$totalamount <=3500) {
        70
      } else if (input$totalamount >3500 & input$totalamount <=3750) {
        75
      } else if (input$totalamount >3750 & input$totalamount <=4000) {
        80
      } else if (input$totalamount >4000 & input$totalamount <=4250) {
        85
      } else if (input$totalamount >4250 & input$totalamount <=4500) {
        90
      } else if (input$totalamount >4500 & input$totalamount <=4750) {
        95
      } else if (input$totalamount >4750 & input$totalamount <=5000) {
        100
      } else {
        105
      }
    } else {
      0
    }
    
    new_entry <- data.frame(
      Date = Sys.Date(),
      Customer_Name = input$customer_name,
      Mobile_Number = input$mobile,
      Type = input$type,
      Total_Amount = input$totalamount,  
      Profit = profit,
      stringsAsFactors = FALSE
    )
    
    df <- transaction_data()
    updated_df <- rbind(df, new_entry)
    save_transactions(updated_df)
    
    updateTextInput(session, "customer_name", value = "")
    updateTextInput(session, "mobile", value = "")
    updateNumericInput(session, "totalamount", value = 0)
    
    showNotification("‚úÖ Transaction Saved!", type = "message")
  })
  
  # Add sale
  observeEvent(input$add_sale, {
    category <- input$product_category
    category_code <- substr(category, 1, 1)
    
    if (category == "J. Others") {
      req(input$other_product, input$quantity)
      brand <- input$other_product
      unit_cost <- 0
      unit_price <- 0
    } else {
      req(input$product_brand, input$quantity)
      brand <- input$product_brand
      
      # Find unit cost and price from product data
      product_row <- product_data()[product_data()$Category == category_code & 
                                      product_data()$Brand == brand, ]
      
      if (nrow(product_row) > 0) {
        unit_cost <- product_row$UnitCost[1]
        unit_price <- product_row$UnitPrice[1]
      } else {
        # Default values if product not found
        unit_cost <- 0
        unit_price <- 0
        showNotification("Product information not found. Using zero values.", type = "warning")
      }
    }
    
    profit <- (unit_price - unit_cost) * input$quantity
    
    new_sale <- data.frame(
      Date = Sys.Date(),
      ProductCategory = category,
      BrandProduct = brand,
      Quantity = input$quantity,
      UnitCost = unit_cost,
      UnitPrice = unit_price,
      Profit = profit,
      stringsAsFactors = FALSE
    )
    
    df <- sales_data()
    updated_df <- rbind(df, new_sale)
    save_sales(updated_df)
    
    # Reset inputs
    if (category == "J. Others") {
      updateTextInput(session, "other_product", value = "")
    }
    updateNumericInput(session, "quantity", value = 1)
    
    showNotification("‚úÖ Sale Recorded!", type = "message")
  })
  
  # Delete transaction row
  observeEvent(input$deleterow, {
    req(input$data_table_rows_selected)
    selected_row <- input$data_table_rows_selected
    df <- transaction_data()
    df <- df[-selected_row, ]
    save_transactions(df)
    showNotification("üóëÔ∏è Transaction deleted!", type = "message")
  })
  
  # Delete sales row
  observeEvent(input$delete_sale_row, {
    req(input$sales_table_rows_selected)
    selected_row <- input$sales_table_rows_selected
    df <- sales_data()
    df <- df[-selected_row, ]
    save_sales(df)
    showNotification("üóëÔ∏è Sale record deleted!", type = "message")
  })
  
  # Clear transaction history
  observeEvent(input$clearhistory, {
    showModal(modalDialog(
      title = "Confirm Deletion",
      "Are you sure you want to delete all transaction history? This action cannot be undone.",
      footer = tagList(
        modalButton("Cancel"),
        actionButton("confirmClear", "Yes, Delete All", class = "btn btn-danger")
      )
    ))
  })
  
  # Confirm clear transactions
  observeEvent(input$confirmClear, {
    empty_df <- data.frame(
      Date = as.Date(character()),
      Customer_Name = character(),
      Mobile_Number = character(),
      Type = character(),
      Total_Amount = numeric(),
      Profit = numeric(),
      stringsAsFactors = FALSE
    )
    write.csv(empty_df, data_file, row.names = FALSE)
    transaction_data(empty_df)  
    showNotification("üßπ History cleared successfully!", type = "message")
    removeModal()
  })
  
  # Clear sales history
  observeEvent(input$clear_sales, {
    showModal(modalDialog(
      title = "Confirm Deletion",
      "Are you sure you want to delete all sales records? This action cannot be undone.",
      footer = tagList(
        modalButton("Cancel"),
        actionButton("confirmClearSales", "Yes, Delete All", class = "btn btn-danger")
      )
    ))
  })
  
  # Confirm clear sales
  observeEvent(input$confirmClearSales, {
    empty_df <- data.frame(
      Date = as.Date(character()),
      ProductCategory = character(),
      BrandProduct = character(),
      Quantity = numeric(),
      UnitCost = numeric(),
      UnitPrice = numeric(),
      Profit = numeric(),
      stringsAsFactors = FALSE
    )
    write.csv(empty_df, sales_file, row.names = FALSE)
    sales_data(empty_df)  
    showNotification("üßπ Sales history cleared successfully!", type = "message")
    removeModal()
  })
  
  # Transactions undo
  observeEvent(input$undoBtn, {
    if (length(history_stack$data) > 0) {
      last_state <- tail(history_stack$data, 1)[[1]]
      history_stack$data <- head(history_stack$data, -1)
      
      redo_stack$data <- append(redo_stack$data, list(transaction_data()))
      
      write.csv(last_state, data_file, row.names = FALSE)
      transaction_data(last_state)
      showNotification("‚Ü©Ô∏è Undo successful!", type = "message")
    } else {
      showNotification("‚ö†Ô∏è Nothing to undo!", type = "warning")
    }
  })
  
  # Transactions redo
  observeEvent(input$redoBtn, {
    if (length(redo_stack$data) > 0) {
      next_state <- tail(redo_stack$data, 1)[[1]]
      redo_stack$data <- head(redo_stack$data, -1)
      
      history_stack$data <- append(history_stack$data, list(transaction_data()))
      
      write.csv(next_state, data_file, row.names = FALSE)
      transaction_data(next_state)
      showNotification("üîÅ Redo successful!", type = "message")
    } else {
      showNotification("‚ö†Ô∏è Nothing to redo!", type = "warning")
    }
  })
  
  # Sales undo
  observeEvent(input$undo_sale, {
    if (length(sales_history_stack$data) > 0) {
      last_state <- tail(sales_history_stack$data, 1)[[1]]
      sales_history_stack$data <- head(sales_history_stack$data, -1)
      
      sales_redo_stack$data <- append(sales_redo_stack$data, list(sales_data()))
      
      write.csv(last_state, sales_file, row.names = FALSE)
      sales_data(last_state)
      showNotification("‚Ü©Ô∏è Undo successful!", type = "message")
    } else {
      showNotification("‚ö†Ô∏è Nothing to undo!", type = "warning")
    }
  })
  
  # Sales redo
  observeEvent(input$redo_sale, {
    if (length(sales_redo_stack$data) > 0) {
      next_state <- tail(sales_redo_stack$data, 1)[[1]]
      sales_redo_stack$data <- head(sales_redo_stack$data, -1)
      
      sales_history_stack$data <- append(sales_history_stack$data, list(sales_data()))
      
      write.csv(next_state, sales_file, row.names = FALSE)
      sales_data(next_state)
      showNotification("üîÅ Redo successful!", type = "message")
    } else {
      showNotification("‚ö†Ô∏è Nothing to redo!", type = "warning")
    }
  })
  
  # Render transaction table
  output$data_table <- renderDT({
    datatable(
      transaction_data(), 
      escape = FALSE, 
      selection = "single",
      options = list(
        order = list(list(0, 'desc')),
        pageLength = 10,
        language = list(
          search = "Quick Search:",
          lengthMenu = "Show _MENU_ entries",
          info = "Showing _START_ to _END_ of _TOTAL_ transactions"
        )
      ),
      class = "cell-border stripe"
    ) %>%
      formatCurrency(columns = c("Total_Amount", "Profit"), 
                     currency = "‚Ç±", 
                     interval = 3, 
                     mark = ",", 
                     digits = 2)
  })
  
  # Render sales table
  output$sales_table <- renderDT({
    datatable(
      sales_data(), 
      escape = FALSE, 
      selection = "single",
      options = list(
        order = list(list(0, 'desc')),
        pageLength = 10,
        language = list(
          search = "Quick Search:",
          lengthMenu = "Show _MENU_ entries",
          info = "Showing _START_ to _END_ of _TOTAL_ sales records"
        )
      ),
      class = "cell-border stripe"
    ) %>%
      formatCurrency(columns = c("UnitCost", "UnitPrice", "Profit"), 
                     currency = "‚Ç±", 
                     interval = 3, 
                     mark = ",", 
                     digits = 2)
  })
  
  # Download transaction data
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("transactions-", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(transaction_data(), file, row.names = FALSE)
    }
  )
  
  # Download sales data as CSV
  output$download_sales <- downloadHandler(
    filename = function() {
      paste("sales-records-", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      write.csv(sales_data(), file, row.names = FALSE)
    }
  )
  
  # Download sales data as Excel
  output$download_sales_excel <- downloadHandler(
    filename = function() {
      paste("sales-records-", Sys.Date(), ".xlsx", sep = "")
    },
    content = function(file) {
      # Check if writexl package is available
      if (!requireNamespace("writexl", quietly = TRUE)) {
        # If not available, use CSV instead
        write.csv(sales_data(), file, row.names = FALSE)
        showNotification("Excel export requires the 'writexl' package. CSV file created instead.", 
                         type = "warning")
      } else {
        # Use writexl if available
        writexl::write_xlsx(sales_data(), file)
      }
    }
  )
  
  # Sales by category
  output$sales_by_category <- renderPlotly({
    req(nrow(sales_data()) > 0)
    today <- Sys.Date()
    today_sales <- sales_data()[sales_data()$Date == today, ]
    
    if(nrow(today_sales) == 0) {
      return(plotly_empty(type = "scatter", mode = "markers") %>%
               layout(title = "No sales data available for today"))
    }
    
    by_category <- aggregate(Quantity ~ ProductCategory, today_sales, sum)
    
    p <- plot_ly(by_category, x = ~ProductCategory, y = ~Quantity, type = "bar",
                 marker = list(color = theme_colors$light,
                               line = list(color = theme_colors$dark, width = 1.5))) %>%
      layout(title = "Today's Sales by Category",
             xaxis = list(title = "Category"),
             yaxis = list(title = "Quantity Sold"),
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
  
  # Profit by category pie chart
  output$profit_by_category <- renderPlotly({
    req(nrow(sales_data()) > 0)
    today <- Sys.Date()
    today_sales <- sales_data()[sales_data()$Date == today, ]
    
    if(nrow(today_sales) == 0) {
      return(plotly_empty(type = "scatter", mode = "markers") %>%
               layout(title = "No profit data available for today"))
    }
    
    by_category <- aggregate(Profit ~ ProductCategory, today_sales, sum)
    
    colors <- c(theme_colors$dark, theme_colors$medium, theme_colors$light, 
                theme_colors$lighter, theme_colors$dark_orange, "#935116", "#D2691E", 
                "#8B4513", "#A52A2A", "#5D4037")
    
    p <- plot_ly(by_category, labels = ~ProductCategory, values = ~Profit, type = "pie",
                 marker = list(colors = colors,
                               line = list(color = '#FFFFFF', width = 1)),
                 textinfo = 'label+percent',
                 insidetextorientation = 'radial') %>%
      layout(title = "Today's Profit by Category",
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
  
  # Summary statistics for sales tab
  output$total_sales_today <- renderText({
    today <- Sys.Date()
    today_sales <- sales_data()[sales_data()$Date == today, ]
    paste0(nrow(today_sales), " items")
  })
  
  output$total_profit_today <- renderText({
    today <- Sys.Date()
    today_sales <- sales_data()[sales_data()$Date == today, ]
    total_profit <- sum(today_sales$Profit, na.rm = TRUE)
    paste0("‚Ç±", format(total_profit, big.mark = ",", scientific = FALSE))
  })
  
  output$highest_category <- renderText({
    today <- Sys.Date()
    today_sales <- sales_data()[sales_data()$Date == today, ]
    
    if(nrow(today_sales) == 0) {
      return("None")
    }
    
    by_category <- aggregate(Profit ~ ProductCategory, today_sales, sum)
    if(nrow(by_category) == 0) {
      return("None")
    }
    
    highest <- by_category[which.max(by_category$Profit), "ProductCategory"]
    return(highest)
  })
  
  # Statistics tab outputs
  output$total_transactions <- renderText({
    paste0(nrow(transaction_data()), " transactions")
  })
  
  output$total_gcash_profit <- renderText({
    total_profit <- sum(transaction_data()$Profit, na.rm = TRUE)
    paste0("‚Ç±", format(total_profit, big.mark = ",", scientific = FALSE))
  })
  
  output$total_sales_profit <- renderText({
    total_profit <- sum(sales_data()$Profit, na.rm = TRUE)
    paste0("‚Ç±", format(total_profit, big.mark = ",", scientific = FALSE))
  })
  
  # Transaction type pie chart
  output$transaction_pie <- renderPlotly({
    req(nrow(transaction_data()) > 0)
    
    type_counts <- as.data.frame(table(transaction_data()$Type))
    colnames(type_counts) <- c("Type", "Count")
    
    colors <- c(theme_colors$dark, theme_colors$medium, theme_colors$light)
    
    p <- plot_ly(type_counts, labels = ~Type, values = ~Count, type = "pie",
                 marker = list(colors = colors,
                               line = list(color = '#FFFFFF', width = 1)),
                 textinfo = 'label+percent',
                 insidetextorientation = 'radial') %>%
      layout(title = "GCash/Load Transaction Types",
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
  
  # Sales distribution by category
  output$sales_distribution <- renderPlotly({
    req(nrow(sales_data()) > 0)
    
    category_counts <- as.data.frame(table(sales_data()$ProductCategory))
    colnames(category_counts) <- c("Category", "Count")
    
    colors <- colorRampPalette(c(theme_colors$dark, theme_colors$medium, theme_colors$light))(nrow(category_counts))
    
    p <- plot_ly(category_counts, labels = ~Category, values = ~Count, type = "pie",
                 marker = list(colors = colors,
                               line = list(color = '#FFFFFF', width = 1)),
                 textinfo = 'label+percent',
                 insidetextorientation = 'radial') %>%
      layout(title = "Sales by Product Category",
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
  
  # Combined profit trend
  output$combined_profit_trend <- renderPlotly({
    trans_data <- transaction_data()
    sales_data_df <- sales_data()
    
    if(nrow(trans_data) == 0 && nrow(sales_data_df) == 0) {
      return(plotly_empty(type = "scatter", mode = "markers") %>%
               layout(title = "No profit data available"))
    }
    
    # Aggregate based on selected period
    period <- input$profit_period
    
    # Function to extract period from date
    get_period <- function(dates, period_type) {
      if(period_type == "Daily") {
        return(dates)
      } else if(period_type == "Weekly") {
        return(format(dates, "%Y-W%V"))
      } else if(period_type == "Monthly") {
        return(format(dates, "%Y-%m"))
      } else { # Annually
        return(format(dates, "%Y"))
      }
    }
    
    # Process transaction data
    if(nrow(trans_data) > 0) {
      trans_data$Period <- get_period(trans_data$Date, period)
      trans_by_period <- aggregate(Profit ~ Period, trans_data, sum)
      trans_by_period$Source <- "GCash/Load"
    } else {
      trans_by_period <- data.frame(Period = character(), Profit = numeric(), Source = character())
    }
    
    # Process sales data
    if(nrow(sales_data_df) > 0) {
      sales_data_df$Period <- get_period(sales_data_df$Date, period)
      sales_by_period <- aggregate(Profit ~ Period, sales_data_df, sum)
      sales_by_period$Source <- "Sales"
    } else {
      sales_by_period <- data.frame(Period = character(), Profit = numeric(), Source = character())
    }
    
    # Combine data
    combined_data <- rbind(trans_by_period, sales_by_period)
    
    if(nrow(combined_data) == 0) {
      return(plotly_empty(type = "scatter", mode = "markers") %>%
               layout(title = "No profit data available for the selected period"))
    }
    
    # Create the plot
    p <- plot_ly(combined_data, x = ~Period, y = ~Profit, color = ~Source, type = "scatter", mode = "lines+markers",
                 colors = c(theme_colors$medium, theme_colors$dark_orange)) %>%
      layout(title = paste(period, "Profit Trend"),
             xaxis = list(title = period),
             yaxis = list(title = "Profit (‚Ç±)"),
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
  
  # GCash profit analysis
  output$gcash_profit_analysis <- renderPlotly({
    req(nrow(transaction_data()) > 0)
    
    # Aggregate profit by type
    type_profit <- aggregate(Profit ~ Type, transaction_data(), sum)
    
    p <- plot_ly(type_profit, x = ~Type, y = ~Profit, type = "bar",
                 marker = list(color = theme_colors$medium,
                               line = list(color = theme_colors$dark, width = 1.5))) %>%
      layout(title = "Profit by Transaction Type",
             xaxis = list(title = "Type"),
             yaxis = list(title = "Profit (‚Ç±)"),
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
  
  # Sales profit analysis
  output$sales_profit_analysis <- renderPlotly({
    req(nrow(sales_data()) > 0)
    
    # Aggregate profit by category
    category_profit <- aggregate(Profit ~ ProductCategory, sales_data(), sum)
    
    p <- plot_ly(category_profit, x = ~ProductCategory, y = ~Profit, type = "bar",
                 marker = list(color = theme_colors$light,
                               line = list(color = theme_colors$dark, width = 1.5))) %>%
      layout(title = "Profit by Product Category",
             xaxis = list(title = "Category"),
             yaxis = list(title = "Profit (‚Ç±)"),
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
  
  # Combined profit analysis
  output$combined_profit_analysis <- renderPlotly({
    trans_data <- transaction_data()
    sales_data_df <- sales_data()
    
    if(nrow(trans_data) == 0 && nrow(sales_data_df) == 0) {
      return(plotly_empty(type = "scatter", mode = "markers") %>%
               layout(title = "No profit data available"))
    }
    
    # Calculate total profits
    gcash_profit <- sum(trans_data$Profit, na.rm = TRUE)
    sales_profit <- sum(sales_data_df$Profit, na.rm = TRUE)
    
    combined_data <- data.frame(
      Source = c("GCash/Load", "Store Sales"),
      Profit = c(gcash_profit, sales_profit)
    )
    
    p <- plot_ly(combined_data, x = ~Source, y = ~Profit, type = "bar",
                 marker = list(color = c(theme_colors$medium, theme_colors$dark_orange),
                               line = list(color = theme_colors$dark, width = 1.5))) %>%
      layout(title = "Total Profit by Source",
             xaxis = list(title = ""),
             yaxis = list(title = "Profit (‚Ç±)"),
             plot_bgcolor = theme_colors$off_white,
             paper_bgcolor = theme_colors$off_white,
             font = list(color = theme_colors$dark))
    
    return(p)
  })
}

shinyApp(ui = ui, server = server)

